
// src/app/api/agents/executor-text/route.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { ai as genkitAi } from '@/ai/genkit'; // Using genkit for LLM

interface TextExecutorInput {
  promptFragment: string; // Specific part of the prompt for text generation/synthesis
  originalPrompt: string;
  contextData?: any; // Optional additional context from previous tasks
}

async function synthesizeText(input: TextExecutorInput): Promise<any> {
  console.log(`[ExecutorText] Synthesizing text for: "${input.promptFragment}"`);

  const useMock = !process.env.GENAI_API_KEY || process.env.USE_MOCK_ORKES_CLIENT === 'true';

  if (useMock) {
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
    return {
      synthesizedText: `Mock synthesized text for: "${input.promptFragment}". Original prompt context: "${input.originalPrompt}". Additional context: ${JSON.stringify(input.contextData)}. This text is generated by a mock agent.`,
      status: "COMPLETED_MOCK",
    };
  }

  try {
    const fullPrompt = `
      Original User Request: "${input.originalPrompt}"
      Current Sub-task: "${input.promptFragment}"
      ${input.contextData ? `Relevant Context: ${typeof input.contextData === 'string' ? input.contextData : JSON.stringify(input.contextData, null, 2)}\n` : ''}
      Please provide a concise and relevant response for the current sub-task, keeping the original user request in mind.
    `;
    const response = await genkitAi.generate({
      prompt: fullPrompt,
      model: 'googleai/gemini-2.0-flash', // Or your preferred model
    });

    return {
      synthesizedText: response.text,
      status: "COMPLETED_REAL",
    };
  } catch (error: any) {
    console.error(`[ExecutorText] Genkit text generation failed: ${error.message}`);
    return {
      error: `Failed to synthesize text: ${error.message}`,
      status: "FAILED",
    };
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const input: TextExecutorInput = body.input;

    if (!input || !input.promptFragment) {
      return NextResponse.json({ error: "Missing or invalid input for text executor" }, { status: 400 });
    }

    console.log("[ExecutorText] Received input:", JSON.stringify(input, null, 2));
    
    const result = await synthesizeText(input);
    
    console.log("[ExecutorText] Text synthesis result:", result.status);
    return NextResponse.json({ ...result });

  } catch (error: any) {
    console.error("[ExecutorText] Error:", error);
    return NextResponse.json({ error: error.message || "An unknown error occurred" }, { status: 500 });
  }
}
