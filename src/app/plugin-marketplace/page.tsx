
'use client';

import { useState, type ChangeEvent } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from '@/components/ui/badge';
import { Store, Puzzle, Download, Star, Filter, Search, ChevronDown, type LucideIcon } from "lucide-react";
import { motion, AnimatePresence } from 'framer-motion';
import type { Plugin } from '@/types/plugin';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuCheckboxItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Image from 'next/image';

const mockPlugins: Plugin[] = [
  {
    id: 'plugin-syntax-pro',
    name: 'Syntax Pro Highlighter',
    author: 'DevTools Inc.',
    version: '1.2.5',
    description: 'Advanced syntax highlighting for over 50 languages. Improves code readability in Neuro Synapse outputs.',
    icon: Puzzle,
    tags: ['editor', 'code', 'developer tools'],
    stars: 4.8,
    downloads: 12500,
    category: 'Productivity',
    price: 'Free',
    imageUrl: 'https://picsum.photos/seed/syntaxpro/400/200',
    dataAiHint: 'code syntax',
  },
  {
    id: 'plugin-data-visualizer',
    name: 'DataViz Suite',
    author: 'AnalyticsCraft',
    version: '2.1.0',
    description: 'Generate interactive charts and graphs from data identified by Web Browsing Agents or Neuro Synapse.',
    icon: Puzzle, // Replace with a more specific icon if available, e.g., BarChart
    tags: ['data', 'visualization', 'charts'],
    stars: 4.5,
    downloads: 8700,
    category: 'Data Tools',
    price: '$9.99',
    imageUrl: 'https://picsum.photos/seed/dataviz/400/200',
    dataAiHint: 'data chart',
  },
  {
    id: 'plugin-creative-writer-assist',
    name: 'Creative Muse',
    author: 'StoryWeaver AI',
    version: '1.0.3',
    description: 'Enhances Idea Catalyst with plot suggestions, character archetypes, and writing style analysis.',
    icon: Puzzle, // Replace with a more specific icon, e.g., Edit3
    tags: ['writing', 'creative', 'ai assistant'],
    stars: 4.9,
    downloads: 15200,
    category: 'Creative',
    price: 'Freemium',
    imageUrl: 'https://picsum.photos/seed/muse/400/200',
    dataAiHint: 'writing book',
  },
  {
    id: 'plugin-project-manager',
    name: 'TaskMaster Connect',
    author: 'OrgFlow Ltd.',
    version: '3.0.1',
    description: 'Integrate NeuroVichar tasks with popular project management tools like Jira, Asana, and Trello.',
    icon: Puzzle, // Replace with a specific icon, e.g., Briefcase
    tags: ['project management', 'integration', 'productivity'],
    stars: 4.2,
    downloads: 6300,
    category: 'Productivity',
    price: '$14.99/mo',
    imageUrl: 'https://picsum.photos/seed/taskmaster/400/200',
    dataAiHint: 'project board',
  },
  {
    id: 'plugin-image-enhancer',
    name: 'PixelPerfect AI',
    author: 'VisionaryAI',
    version: '1.5.0',
    description: 'Upscale, denoise, and enhance images generated by the AI Image Generation feature or provided as context.',
    icon: Puzzle, // Replace with a specific icon, e.g., Image
    tags: ['image processing', 'ai', 'graphics'],
    stars: 4.7,
    downloads: 9800,
    category: 'Creative',
    price: '$5.99',
    imageUrl: 'https://picsum.photos/seed/pixelperfect/400/200',
    dataAiHint: 'image enhance',
  },
  {
    id: 'plugin-translation-master',
    name: 'Polyglot Engine',
    author: 'LinguaTech',
    version: '2.2.0',
    description: 'Real-time translation capabilities for Neuro Synapse inputs and outputs across 100+ languages.',
    icon: Puzzle, // Replace with a specific icon, e.g., Languages
    tags: ['translation', 'language', 'communication'],
    stars: 4.6,
    downloads: 7200,
    category: 'Utilities',
    price: 'Free',
    imageUrl: 'https://picsum.photos/seed/polyglot/400/200',
    dataAiHint: 'language translate',
  },
];

const categories = ['All', ...Array.from(new Set(mockPlugins.map(p => p.category)))];
const sortOptions = ['Popularity', 'Rating', 'Newest', 'Price'];


const PluginCard: React.FC<{ plugin: Plugin, index: number }> = ({ plugin, index }) => {
  const IconComponent = plugin.icon;
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.05, duration: 0.4, ease: "easeOut" }}
    >
      <Card className="flex flex-col h-full shadow-lg hover:shadow-xl transition-all duration-300 ease-in-out border-2 border-transparent hover:border-accent bg-card/80 backdrop-blur-sm group overflow-hidden">
        <CardHeader className="p-0">
          <div className="relative w-full h-40">
            <Image 
              src={plugin.imageUrl || `https://picsum.photos/seed/${plugin.id}/400/200`} 
              alt={`${plugin.name} visual representation`} 
              layout="fill"
              objectFit="cover"
              className="transition-transform duration-500 group-hover:scale-105"
              data-ai-hint={plugin.dataAiHint}
            />
          </div>
          <div className="p-4">
            <div className="flex items-start gap-3 mb-2">
              <div className="p-2.5 bg-primary/10 rounded-lg text-primary group-hover:bg-accent/10 group-hover:text-accent transition-colors">
                <IconComponent className="w-7 h-7" />
              </div>
              <div>
                <CardTitle className="text-xl group-hover:text-accent transition-colors">{plugin.name}</CardTitle>
                <p className="text-xs text-muted-foreground">By {plugin.author} - v{plugin.version}</p>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent className="px-4 pb-4 flex-grow">
          <CardDescription className="text-sm text-muted-foreground group-hover:text-foreground/90 transition-colors leading-relaxed mb-3 min-h-[60px]">
            {plugin.description}
          </CardDescription>
          <div className="flex flex-wrap gap-1.5">
            {plugin.tags.slice(0, 3).map(tag => (
              <Badge key={tag} variant="secondary" className="text-xs capitalize py-0.5 px-2 group-hover:bg-accent/20 group-hover:border-accent/50 group-hover:text-accent transition-colors">
                {tag}
              </Badge>
            ))}
          </div>
        </CardContent>
        <CardFooter className="px-4 pb-4 mt-auto">
          <div className="flex justify-between items-center w-full">
            <div className="flex items-center gap-1.5 text-sm text-amber-500">
              <Star className="w-4 h-4 fill-current" />
              <span>{plugin.stars.toFixed(1)}</span>
              <span className="text-xs text-muted-foreground">({plugin.downloads.toLocaleString()} installs)</span>
            </div>
            <Button size="sm" variant="outline" className="group-hover:bg-accent group-hover:text-accent-foreground group-hover:border-accent transition-colors">
              <Download className="w-4 h-4 mr-1.5" />
              {plugin.price === 'Free' || plugin.price === 'Freemium' ? (plugin.price === 'Free' ? 'Install' : 'Try') : `Get (${plugin.price})`}
            </Button>
          </div>
        </CardFooter>
      </Card>
    </motion.div>
  );
};


export default function PluginMarketplacePage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [selectedSort, setSelectedSort] = useState('Popularity');

  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const filteredPlugins = mockPlugins
    .filter(plugin => 
      plugin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      plugin.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      plugin.author.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter(plugin => 
      selectedCategory === 'All' || plugin.category === selectedCategory
    )
    .sort((a, b) => {
      switch (selectedSort) {
        case 'Rating':
          return b.stars - a.stars;
        case 'Newest': // Assuming IDs are somewhat sequential or we add a date field
          return mockPlugins.indexOf(b) - mockPlugins.indexOf(a); // Simplistic, needs date
        case 'Price': // Complex, needs actual price parsing
          const priceA = parseFloat(a.price.replace(/[^0-9.]/g, '')) || (a.price.toLowerCase() === 'free' || a.price.toLowerCase() === 'freemium' ? 0 : Infinity);
          const priceB = parseFloat(b.price.replace(/[^0-9.]/g, '')) || (b.price.toLowerCase() === 'free' || b.price.toLowerCase() === 'freemium' ? 0 : Infinity);
          return priceA - priceB;
        case 'Popularity':
        default:
          return b.downloads - a.downloads;
      }
    });

  return (
    <div className="space-y-12">
      <motion.header 
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="text-center space-y-4"
      >
        <Store className="w-20 h-20 text-accent mx-auto drop-shadow-lg" />
        <h1 className="text-5xl md:text-6xl font-extrabold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-primary via-accent to-pink-500">
          Plugin Marketplace
        </h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          Extend NeuroVichar&apos;s capabilities with powerful plugins and integrations built by the community and our team.
        </p>
      </motion.header>

      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2, ease: "easeOut" }}
        className="sticky top-0 z-10 bg-background/80 backdrop-blur-md py-4 shadow-sm rounded-lg"
      >
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row gap-4 items-center">
            <div className="relative flex-grow w-full md:w-auto">
              <Input
                type="search"
                placeholder="Search plugins (e.g., 'data visualization', 'writing assistant')..."
                value={searchTerm}
                onChange={handleSearchChange}
                className="text-lg p-4 h-14 pl-12 shadow-inner focus:ring-accent focus:border-accent"
                aria-label="Search plugins"
              />
              <Search className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
            </div>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="lg" className="text-md h-14 w-full md:w-auto shadow-sm hover:border-accent">
                  <Filter className="w-5 h-5 mr-2" />
                  Category: {selectedCategory}
                  <ChevronDown className="w-5 h-5 ml-2 opacity-70" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>Filter by Category</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {categories.map(category => (
                  <DropdownMenuCheckboxItem
                    key={category}
                    checked={selectedCategory === category}
                    onCheckedChange={() => setSelectedCategory(category)}
                  >
                    {category}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="lg" className="text-md h-14 w-full md:w-auto shadow-sm hover:border-accent">
                  Sort by: {selectedSort}
                  <ChevronDown className="w-5 h-5 ml-2 opacity-70" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>Sort Plugins</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {sortOptions.map(option => (
                  <DropdownMenuCheckboxItem
                    key={option}
                    checked={selectedSort === option}
                    onCheckedChange={() => setSelectedSort(option)}
                  >
                    {option}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            
            <Button size="lg" className="text-md h-14 w-full md:w-auto shadow-md bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-primary-foreground">
              <Puzzle className="w-5 h-5 mr-2" /> Submit Your Plugin
            </Button>
          </div>
        </div>
      </motion.div>

      <AnimatePresence>
        {filteredPlugins.length > 0 ? (
          <motion.div 
            layout 
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            {filteredPlugins.map((plugin, index) => (
              <PluginCard key={plugin.id} plugin={plugin} index={index} />
            ))}
          </motion.div>
        ) : (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="text-center py-16"
          >
            <Search className="w-24 h-24 text-muted-foreground mx-auto mb-6 opacity-50" />
            <h2 className="text-2xl font-semibold text-foreground mb-2">No Plugins Found</h2>
            <p className="text-muted-foreground">
              Try adjusting your search or filter criteria, or explore all available plugins.
            </p>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

