# src/workflows/neuro_synapse_workflow_v1.yaml
name: "neuro_synapse_workflow_v1"
description: "Orchestrates AI agents to process complex prompts for NeuroVichar, considering user context."
version: 1
ownerEmail: "dev@neurovichar.ai"
restartable: true
workflowStatusListenerEnabled: true

# Input parameters for the workflow
inputParameters:
  - name: "mainPrompt"
    description: "The primary complex prompt from the user."
    type: "string"
  - name: "imageDataUri"
    description: "Optional base64 encoded image data URI."
    type: "string"
    optional: true
  - name: "userContext"
    description: "Optional user activity context for personalization."
    type: "object" # JSON object for user context
    optional: true


tasks:
  - name: "analyze_prompt_task"
    taskReferenceName: "analyze_prompt_ref"
    type: "HTTP"
    inputParameters:
      http_request:
        uri: "${env.NGROK_BASE_URL}/api/agents/analyzer" 
        method: "POST"
        contentType: "application/json"
        # Pass the entire workflow input, which now includes mainPrompt, imageDataUri, and userContext
        body: "${workflow.input}" 
    retryCount: 2
    retryLogic: "FIXED"
    retryDelaySeconds: 10
    timeoutSeconds: 120 

  - name: "plan_execution_task"
    taskReferenceName: "plan_execution_ref"
    type: "HTTP"
    inputParameters:
      http_request:
        uri: "${env.NGROK_BASE_URL}/api/agents/planner"
        method: "POST"
        contentType: "application/json"
        body:
          # The planner now receives the full output from the analyzer,
          # which includes deconstructedSubTasks, analysisSummary, originalPrompt, hasImageContext, and userContextProvided.
          input: "${analyze_prompt_ref.output}" 
    retryCount: 2
    retryLogic: "FIXED"
    retryDelaySeconds: 5
    timeoutSeconds: 60

  - name: "decide_execution_path_task"
    taskReferenceName: "decide_execution_path_ref"
    type: "DECISION"
    inputParameters:
      planned_task_count: "${plan_execution_ref.output.executionPlan.length}"
    caseValueParam: "planned_task_count"
    decisionCases:
      "0": 
        - name: "ethical_check_direct_synthesis_task"
          taskReferenceName: "ethical_check_direct_synthesis_ref"
          type: "HTTP"
          inputParameters:
            http_request:
              uri: "${env.NGROK_BASE_URL}/api/agents/ethical-checker"
              method: "POST"
              contentType: "application/json"
              body:
                input:
                  contentToReview:
                    originalPrompt: "${workflow.input.mainPrompt}"
                    analysisSummary: "${analyze_prompt_ref.output.analysisSummary}"
                    planSummary: "No complex execution path planned."
                  originalPrompt: "${workflow.input.mainPrompt}"
                  currentStage: "direct_synthesis_review"
          retryCount: 1
          timeoutSeconds: 60
        - name: "synthesize_direct_result_task" 
          taskReferenceName: "synthesize_direct_result_ref"
          type: "HTTP"
          inputParameters:
            http_request:
              uri: "${env.NGROK_BASE_URL}/api/agents/result-synthesizer"
              method: "POST"
              contentType: "application/json"
              body:
                input:
                  originalPrompt: "${workflow.input.mainPrompt}"
                  hasImageContext: "${analyze_prompt_ref.output.hasImageContext}" # Use determined value from analyzer
                  userContext: "${workflow.input.userContext}" # Pass original user context
                  analysisSummary: "${analyze_prompt_ref.output.analysisSummary}"
                  planSummary: "No complex execution path planned; direct synthesis."
                  executorOutputs: [] 
                  ethicalCheckResult: "${ethical_check_direct_synthesis_ref.output}"
                  deconstructedSubTasks: "${analyze_prompt_ref.output.deconstructedSubTasks}" # Pass this for diagram generation
          retryCount: 1
          timeoutSeconds: 180
    defaultCase: 
        - name: "fork_join_executors_task"
          taskReferenceName: "fork_join_executors_ref"
          type: "FORK_JOIN_DYNAMIC" 
          inputParameters:
            dynamicForkTasksParam: "dynamic_tasks_input" 
            dynamicForkTasksInput: "${plan_execution_ref.output.executionPlan}" 

        - name: "ethical_check_intermediate_results_task"
          taskReferenceName: "ethical_check_intermediate_ref"
          type: "HTTP"
          inputParameters:
            http_request:
              uri: "${env.NGROK_BASE_URL}/api/agents/ethical-checker"
              method: "POST"
              contentType: "application/json"
              body:
                input:
                  contentToReview: "${fork_join_executors_ref.output}" 
                  originalPrompt: "${workflow.input.mainPrompt}"
                  currentStage: "pre_synthesis_review"
          retryCount: 1
          timeoutSeconds: 60

        - name: "synthesize_final_result_task"
          taskReferenceName: "synthesize_final_result_ref"
          type: "HTTP"
          inputParameters:
            http_request:
              uri: "${env.NGROK_BASE_URL}/api/agents/result-synthesizer"
              method: "POST"
              contentType: "application/json"
              body:
                input:
                  originalPrompt: "${workflow.input.mainPrompt}"
                  hasImageContext: "${analyze_prompt_ref.output.hasImageContext}" # Use determined value
                  userContext: "${workflow.input.userContext}" # Pass original user context
                  analysisSummary: "${analyze_prompt_ref.output.analysisSummary}"
                  planSummary: "${plan_execution_ref.output.planSummary}"
                  executorOutputs: "${jsonUtils.toJsonPath(fork_join_executors_ref.output, '$.*')}"
                  ethicalCheckResult: "${ethical_check_intermediate_ref.output}"
                  deconstructedSubTasks: "${analyze_prompt_ref.output.deconstructedSubTasks}" # Pass this for diagram generation
                  # plannedTasks: "${plan_execution_ref.output.executionPlan}" # Could also pass this if needed
          retryCount: 1
          timeoutSeconds: 240 # Increased timeout for complex synthesis

outputParameters:
  finalAnswer: "${synthesize_final_result_ref.output}" 
  directAnswer: "${synthesize_direct_result_ref.output}" 
  workflowPathTaken: "${decide_execution_path_ref.output.caseOutput}" 
  overallEthicalCompliance: > 
    ${if (decide_execution_path_ref.output.caseOutput == '0') then ethical_check_direct_synthesis_ref.output else ethical_check_intermediate_ref.output endif}


taskDefinitions:
  - name: "execute_web_search_task" 
    retryCount: 2
    timeoutSeconds: 120
    inputKeys: ["promptFragment", "originalPrompt", "hasImageContext", "userContext"] # Add userContext if agents might use it
    outputKeys: ["searchResults", "summary", "status", "error"]
    http_request: 
        uri: "${env.NGROK_BASE_URL}/api/agents/executor-web-search"
        method: "POST"
        contentType: "application/json"

  - name: "execute_image_generation_task"
    retryCount: 1 
    timeoutSeconds: 300 
    inputKeys: ["promptFragment", "originalPrompt", "hasImageContext", "userContext"]
    outputKeys: ["imageDataUri", "imageUrl", "altText", "status", "error"]
    http_request:
        uri: "${env.NGROK_BASE_URL}/api/agents/executor-image"
        method: "POST"
        contentType: "application/json"

  - name: "execute_code_generation_task"
    retryCount: 2
    timeoutSeconds: 180
    inputKeys: ["promptFragment", "originalPrompt", "hasImageContext", "userContext"]
    outputKeys: ["generatedCode", "language", "executionLog", "status", "error"]
    http_request:
        uri: "${env.NGROK_BASE_URL}/api/agents/executor-code"
        method: "POST"
        contentType: "application/json"
        
  - name: "execute_text_synthesis_task"
    retryCount: 2
    timeoutSeconds: 120
    inputKeys: ["promptFragment", "originalPrompt", "hasImageContext", "contextData", "userContext"]
    outputKeys: ["synthesizedText", "status", "error"]
    http_request:
        uri: "${env.NGROK_BASE_URL}/api/agents/executor-text"
        method: "POST"
        contentType: "application/json"

