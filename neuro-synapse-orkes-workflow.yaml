name: neuro_synapse_workflow_v1
description: Orchestrates AI agents for the NeuroVichar Neuro Synapse feature.
version: 1
ownerEmail: "dev@neurovichar.ai"
tasks:
  - name: analyze_prompt
    taskReferenceName: analyze_prompt_ref
    type: HTTP
    inputParameters:
      http_request:
        uri: "${workflow.input.ngrokBaseUrl}/api/agents/analyzer" # ngrokBaseUrl will be passed as workflow input
        method: POST
        contentType: "application/json"
        body: {
          "prompt": "${workflow.input.prompt}",
          "imageDataUri": "${workflow.input.imageDataUri}"
        }
    retryCount: 2
    retryLogic: FIXED
    retryDelaySeconds: 10
    timeoutSeconds: 60

  - name: plan_execution
    taskReferenceName: plan_execution_ref
    type: HTTP
    inputParameters:
      http_request:
        uri: "${workflow.input.ngrokBaseUrl}/api/agents/planner"
        method: POST
        contentType: "application/json"
        body: {
          "originalPrompt": "${workflow.input.prompt}",
          "analysisResult": "${analyze_prompt_ref.output.response.body}"
        }
    retryCount: 2
    retryLogic: FIXED
    retryDelaySeconds: 10
    timeoutSeconds: 60

  - name: fork_execution_tasks
    taskReferenceName: fork_execution_tasks_ref
    type: FORK_JOIN
    forkTasks:
      - - name: execute_code_generation_task # Example task
          taskReferenceName: execute_code_gen_ref
          type: HTTP
          optional: true # Task can fail without failing workflow
          inputParameters:
            http_request:
              uri: "${workflow.input.ngrokBaseUrl}/api/agents/executor/code"
              method: POST
              contentType: "application/json"
              body: {
                "description": "Generate code based on: ${workflow.input.prompt}",
                "language": "python" # Could be dynamic from planner
              }
          retryCount: 1
          timeoutSeconds: 120
          
      - - name: execute_image_generation_task # Example task, decision to run this can be made
          taskReferenceName: execute_image_gen_ref
          type: HTTP
          optional: true
          inputParameters:
            http_request:
              uri: "${workflow.input.ngrokBaseUrl}/api/agents/executor/image"
              method: POST
              contentType: "application/json"
              body: {
                 "prompt": "Create a visual representation for: ${workflow.input.prompt}"
              }
          retryCount: 1
          timeoutSeconds: 180
          
      - - name: execute_evaluation_task # Example task
          taskReferenceName: execute_eval_ref
          type: HTTP
          optional: true
          inputParameters:
            http_request:
              uri: "${workflow.input.ngrokBaseUrl}/api/agents/executor/evaluate"
              method: POST
              contentType: "application/json"
              body: {
                "contentToEvaluate": "Results from code/image generation (needs dynamic wiring if results are passed)",
                "evaluationCriteria": ["clarity", "relevance"]
              }
          retryCount: 1
          timeoutSeconds: 90

  - name: join_execution_results
    taskReferenceName: join_execution_results_ref
    type: JOIN
    joinOn: # List of task reference names from the forkTasks array
      - execute_code_gen_ref
      - execute_image_gen_ref
      - execute_eval_ref
  
  - name: ethical_check
    taskReferenceName: ethical_check_ref
    type: HTTP
    inputParameters:
      http_request:
        uri: "${workflow.input.ngrokBaseUrl}/api/agents/ethical-checker"
        method: POST
        contentType: "application/json"
        body: {
          "contentToCheck": { # Combine relevant outputs for ethical check
            "promptAnalysis": "${analyze_prompt_ref.output.response.body}",
            "plan": "${plan_execution_ref.output.response.body}",
            "codeOutput": "${execute_code_gen_ref.output.response.body}", # Accessing fork task output
            "imageOutput": "${execute_image_gen_ref.output.response.body}",
            "evaluationOutput": "${execute_eval_ref.output.response.body}"
          }
        }
    retryCount: 1
    timeoutSeconds: 60

  - name: decide_on_ethics
    taskReferenceName: decide_on_ethics_ref
    type: DECISION
    caseValueParam: "ethical_check_ref.output.response.body.isCompliant" # Check boolean output
    decisionCases:
      "true": # If isCompliant is true
        - name: synthesize_final_result
          taskReferenceName: synthesize_final_result_ref
          type: HTTP
          inputParameters:
            http_request:
              uri: "${workflow.input.ngrokBaseUrl}/api/agents/result-synthesizer"
              method: POST
              contentType: "application/json"
              body: {
                "originalPrompt": "${workflow.input.prompt}",
                "hasImageContext": "${workflow.input.imageDataUri != null}",
                "analyzerOutput": "${analyze_prompt_ref.output.response.body}",
                "plannerOutput": "${plan_execution_ref.output.response.body}",
                "executorOutputs": [ # Collect outputs from forked tasks
                  { "taskName": "code_generation", "agentType": "CodeGenerator", "status": "${execute_code_gen_ref.status}", "output": "${execute_code_gen_ref.output.response.body}", "error": "${execute_code_gen_ref.reasonForIncompletion}"},
                  { "taskName": "image_generation", "agentType": "ImageGenerator", "status": "${execute_image_gen_ref.status}", "output": "${execute_image_gen_ref.output.response.body}", "error": "${execute_image_gen_ref.reasonForIncompletion}"},
                  { "taskName": "evaluation", "agentType": "Evaluator", "status": "${execute_eval_ref.status}", "output": "${execute_eval_ref.output.response.body}", "error": "${execute_eval_ref.reasonForIncompletion}"}
                ],
                "ethicalCheckerOutput": "${ethical_check_ref.output.response.body}"
              }
          timeoutSeconds: 120
    defaultCase: # If isCompliant is false or not "true"
      - name: handle_ethical_failure
        taskReferenceName: handle_ethical_failure_ref
        type: TERMINATE # Or a custom handling task
        inputParameters:
          terminationStatus: FAILED
          workflowOutput: {
            "error": "Ethical compliance check failed.",
            "details": "${ethical_check_ref.output.response.body}"
          }
          
outputParameters:
  finalAnswer: "${synthesize_final_result_ref.output.response.body.synthesizedAnswer}"
  workflowExplanation: "${synthesize_final_result_ref.output.response.body.workflowExplanation}"
  decomposedTasks: "${synthesize_final_result_ref.output.response.body.decomposedTasks}"
  workflowDiagramData: "${synthesize_final_result_ref.output.response.body.workflowDiagramData}"
  ethicalComplianceDetails: "${ethical_check_ref.output.response.body}"
  # You can add more outputs from various tasks as needed
#
# Instructions for use:
# 1. Replace `your_ngrok_base_url` in the URIs with the actual base URL provided by ngrok when you run `ngrok http 9002`.
#    Or, pass `ngrokBaseUrl` as an input parameter to the workflow:
#    Workflow Input: { "prompt": "User's prompt", "ngrokBaseUrl": "https://xxxx.ngrok.io" }
# 2. Upload this workflow definition to your Orkes Cloud instance.
# 3. Define each HTTP task (e.g., analyze_prompt, plan_execution) in Orkes Conductor.
#    The task definition name in Orkes must match the `name` field in the workflow.
#    Example Task Definition (JSON for Orkes UI):
#    {
#      "name": "analyze_prompt",
#      "retryCount": 2,
#      "retryLogic": "FIXED",
#      "retryDelaySeconds": 10,
#      "timeoutSeconds": 60,
#      "timeoutPolicy": "TIME_OUT_WF",
#      "responseTimeoutSeconds": 60,
#      "ownerEmail": "dev@neurovichar.ai"
#    }
#
# Note on Forked Task Outputs: Accessing outputs from tasks within a FORK_JOIN
# directly in subsequent tasks (like `synthesize_final_result_ref`) can be tricky.
# The `join_execution_results_ref` task will have an output that is an object
# where keys are the taskReferenceNames from `forkTasks` and values are their respective outputs.
# You might need to adjust the `synthesize_final_result_ref` input to correctly map these:
# "codeOutput": "${join_execution_results_ref.output.execute_code_gen_ref}"
# "imageOutput": "${join_execution_results_ref.output.execute_image_gen_ref}"
# This YAML reflects direct access for simplicity, but the JOIN task output structure is key.
# Refer to Orkes documentation on FORK_JOIN and JOIN task outputs.
#
# Input to this workflow:
# {
#   "prompt": "User's complex prompt",
#   "imageDataUri": "data:image/png;base64,..." (optional),
#   "ngrokBaseUrl": "https://your-ngrok-subdomain.ngrok-free.app" (Orkes needs to reach your local services)
# }

# Output from this workflow (if synthesize_final_result_ref completes):
# {
#   "finalAnswer": "...",
#   "workflowExplanation": "...",
#   "decomposedTasks": [...],
#   "workflowDiagramData": {...},
#   "ethicalComplianceDetails": {...}
# }
#
# If ethical_check_ref.output.response.body.isCompliant is false:
# {
#   "error": "Ethical compliance check failed.",
#   "details": { ...ethical check output... }
# }

failureWorkflow: "handle_neuro_synapse_failure_workflow_v1" # Optional: specify a workflow to run on failure
schemaVersion: 2 # Standard for Conductor workflows
restartable: true
workflowStatusListenerEnabled: true # Enable events for workflow status changes